import 'dart:typed_data';
import 'package:flutter/services.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';

class CipherPdfGenerator {
  /// Generate a PDF document for the cipher puzzle
  static Future<Uint8List> generateCipherPdf({
    required String originalText,
    required List<String> cipheredCharacters,
    required String? selectedEncoding,
    required Map<String, String> substitutionMap,
    required bool showKey,
  }) async {
    final pdf = pw.Document();
    final font = await PdfGoogleFonts.nunitoRegular();
    final fontBold = await PdfGoogleFonts.nunitoBold();
    final mathFont = await PdfGoogleFonts.montserratRegular();
    
    // Get key image if it exists
    pw.MemoryImage? keyImage;
    if (showKey && selectedEncoding != null) {
      try {
        final keyImageData = await rootBundle.load('assets/key/${selectedEncoding}_key.png');
        keyImage = pw.MemoryImage(keyImageData.buffer.asUint8List());
      } catch (e) {
        // Key image not available
      }
    }
    
    // Load character images for image encoding
    Map<String, pw.MemoryImage> characterImages = {};
    if (selectedEncoding != null) {
      await _loadCharacterImages(characterImages, selectedEncoding);
    }
    
    // Group characters into words for better layout
    List<List<String>> words = _groupIntoWords(cipheredCharacters);

    // First page: Cipher Puzzle
    pdf.addPage(
      pw.Page(
        pageFormat: PdfPageFormat.letter,
        margin: const pw.EdgeInsets.all(36.0),
        build: (pw.Context context) {
          return pw.Column(
            crossAxisAlignment: pw.CrossAxisAlignment.start,
            children: [
              // Header
              pw.Center(
                child: pw.Text(
                  'Crazy Crunchy Ciphers',
                  style: pw.TextStyle(
                    font: fontBold,
                    fontSize: 24,
                  ),
                ),
              ),
              pw.SizedBox(height: 8),
              pw.Center(
                child: pw.Text(
                  'Can you crack the code?',
                  style: pw.TextStyle(
                    font: font,
                    fontSize: 14,
                    color: PdfColors.grey700,
                    fontStyle: pw.FontStyle.italic,
                  ),
                ),
              ),
              pw.SizedBox(height: 20),
              
              // Show key if enabled
              if (showKey) ...[
                _buildKeySection(
                  substitutionMap, 
                  selectedEncoding,
                  keyImage,
                  font, 
                  fontBold
                ),
                pw.SizedBox(height: 20),
              ],
              
              // Cipher puzzle
              pw.Container(
                padding: const pw.EdgeInsets.all(16),
                decoration: pw.BoxDecoration(
                  border: pw.Border.all(width: 1, color: PdfColors.grey300),
                  borderRadius: const pw.BorderRadius.all(pw.Radius.circular(8)),
                ),
                child: pw.Column(
                  crossAxisAlignment: pw.CrossAxisAlignment.center,
                  children: [
                    pw.Wrap(
                      spacing: 5,
                      runSpacing: 16,
                      children: _buildCipherContent(
                        words, 
                        selectedEncoding,
                        font,
                        mathFont,
                        characterImages,
                        showSolution: false,
                        fontBold: fontBold,
                      ),
                    ),
                  ],
                ),
              ),
              
              // Footer
              pw.Spacer(),
              pw.Center(
                child: pw.Text(
                  'Generated by Crazy Crunchy Ciphers',
                  style: pw.TextStyle(
                    font: font,
                    fontSize: 10,
                    color: PdfColors.grey,
                  ),
                ),
              ),
              pw.SizedBox(height: 4),
              pw.Center(
                child: pw.Text(
                  'Answer key on next page',
                  style: pw.TextStyle(
                    font: fontBold,
                    fontSize: 8,
                    color: PdfColors.grey700,
                  ),
                ),
              ),
            ],
          );
        },
      ),
    );
    
    // Second page: Answer Key
    pdf.addPage(
      pw.Page(
        pageFormat: PdfPageFormat.letter,
        margin: const pw.EdgeInsets.all(36.0),
        build: (pw.Context context) {
          return pw.Column(
            crossAxisAlignment: pw.CrossAxisAlignment.start,
            children: [
              // Header for answer key
              pw.Center(
                child: pw.Text(
                  'Answer Key',
                  style: pw.TextStyle(
                    font: fontBold,
                    fontSize: 24,
                  ),
                ),
              ),
              pw.SizedBox(height: 4),
              pw.Center(
                child: pw.Text(
                  'Crazy Crunchy Ciphers',
                  style: pw.TextStyle(
                    font: font,
                    fontSize: 16,
                    color: PdfColors.grey700,
                  ),
                ),
              ),
              pw.SizedBox(height: 20),
              
              // Original text display
              pw.Container(
                width: double.infinity,
                padding: const pw.EdgeInsets.all(16),
                decoration: pw.BoxDecoration(
                  border: pw.Border.all(width: 1, color: PdfColors.grey300),
                  borderRadius: const pw.BorderRadius.all(pw.Radius.circular(8)),
                  color: PdfColors.grey100,
                ),
                child: pw.Column(
                  crossAxisAlignment: pw.CrossAxisAlignment.start,
                  children: [
                    pw.Text(
                      'Original Text:',
                      style: pw.TextStyle(
                        font: fontBold,
                        fontSize: 14,
                        color: PdfColors.grey800,
                      ),
                    ),
                    pw.SizedBox(height: 8),
                    pw.Text(
                      originalText,
                      style: pw.TextStyle(
                        font: font, 
                        fontSize: 14,
                        color: PdfColors.black,
                      ),
                    ),
                  ],
                ),
              ),
              pw.SizedBox(height: 30),
              
              // Solved cipher
              pw.Container(
                width: double.infinity,
                padding: const pw.EdgeInsets.all(16),
                decoration: pw.BoxDecoration(
                  border: pw.Border.all(width: 1, color: PdfColors.grey300),
                  borderRadius: const pw.BorderRadius.all(pw.Radius.circular(8)),
                ),
                child: pw.Column(
                  crossAxisAlignment: pw.CrossAxisAlignment.start,
                  children: [
                    pw.Text(
                      'Solved Cipher:',
                      style: pw.TextStyle(
                        font: fontBold,
                        fontSize: 14,
                        color: PdfColors.grey800,
                      ),
                    ),
                    pw.SizedBox(height: 16),
                    pw.Center(
                      child: pw.Wrap(
                        spacing: 5,
                        runSpacing: 16,
                        children: _buildCipherContent(
                          words, 
                          selectedEncoding,
                          font,
                          mathFont,
                          characterImages,
                          showSolution: true,
                          originalText: originalText,
                          fontBold: fontBold,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              
              // Encoding key explanation
              if (selectedEncoding != null) ...[
                pw.SizedBox(height: 30),
                pw.Container(
                  width: double.infinity,
                  padding: const pw.EdgeInsets.all(16),
                  decoration: pw.BoxDecoration(
                    border: pw.Border.all(width: 1, color: PdfColors.grey300),
                    borderRadius: const pw.BorderRadius.all(pw.Radius.circular(8)),
                    color: PdfColors.blue50,
                  ),
                  child: pw.Column(
                    crossAxisAlignment: pw.CrossAxisAlignment.start,
                    children: [
                      pw.Text(
                        'Encoding Information:',
                        style: pw.TextStyle(
                          font: fontBold,
                          fontSize: 14,
                          color: PdfColors.blue800,
                        ),
                      ),
                      pw.SizedBox(height: 8),
                      pw.Text(
                        'This cipher uses the "$selectedEncoding" encoding type for character representation.',
                        style: pw.TextStyle(
                          font: font, 
                          fontSize: 12,
                          color: PdfColors.blue800,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
              
              // Footer
              pw.Spacer(),
              pw.Center(
                child: pw.Text(
                  'For teacher/instructor use only',
                  style: pw.TextStyle(
                    font: fontBold,
                    fontSize: 10,
                    color: PdfColors.red,
                  ),
                ),
              ),
            ],
          );
        },
      ),
    );

    return pdf.save();
  }
  
  /// Load character images for image encoding
  static Future<void> _loadCharacterImages(
    Map<String, pw.MemoryImage> characterImages,
    String encoding
  ) async {
    final alphabet = List.generate(26, (index) => String.fromCharCode(65 + index));
    
    for (String letter in alphabet) {
      try {
        final imagePath = 'assets/$encoding/${letter.toLowerCase()}/${letter.toUpperCase()}.png';
        final imageData = await rootBundle.load(imagePath);
        characterImages[letter] = pw.MemoryImage(imageData.buffer.asUint8List());
      } catch (e) {
        // Image not available for this character
      }
    }
  }
  
  /// Group characters into words for better layout
  static List<List<String>> _groupIntoWords(List<String> characters) {
    List<List<String>> words = [];
    List<String> currentWord = [];
    
    for (String char in characters) {
      if (char == ' ' || char == '\n') {
        if (currentWord.isNotEmpty) {
          words.add(currentWord);
          currentWord = [];
        }
        // Add space as a separate "word"
        words.add([char]);
      } else {
        currentWord.add(char);
      }
    }
    
    if (currentWord.isNotEmpty) {
      words.add(currentWord);
    }
    
    return words;
  }
  
  /// Build key section for PDF without special characters
  static pw.Widget _buildKeySection(
    Map<String, String> substitutionMap,
    String? selectedEncoding,
    pw.MemoryImage? keyImage,
    pw.Font font,
    pw.Font fontBold,
  ) {
    if (selectedEncoding == null) {
      // Build substitution cipher key grid
      final alphabet = List.generate(26, (index) => String.fromCharCode(65 + index));
      
      return pw.Container(
        width: 200,
        padding: const pw.EdgeInsets.all(8),
        decoration: pw.BoxDecoration(
          border: pw.Border.all(width: 1, color: PdfColors.grey400),
          borderRadius: const pw.BorderRadius.all(pw.Radius.circular(4)),
        ),
        child: pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            pw.Text(
              'KEY:',
              style: pw.TextStyle(font: fontBold, fontSize: 12),
            ),
            pw.SizedBox(height: 6),
            pw.Wrap(
              spacing: 5,
              runSpacing: 5,
              children: alphabet.map((letter) {
                final substitution = substitutionMap[letter] ?? '?';
                return pw.Container(
                  width: 40,
                  height: 20,
                  alignment: pw.Alignment.center,
                  child: pw.Row(
                    mainAxisSize: pw.MainAxisSize.min,
                    children: [
                      pw.Text(
                        letter,
                        style: pw.TextStyle(font: fontBold, fontSize: 10),
                      ),
                      pw.Text(
                        '=',  // Using equals sign instead of arrow
                        style: pw.TextStyle(font: font, fontSize: 10),
                      ),
                      pw.Text(
                        substitution,
                        style: pw.TextStyle(
                          font: font, 
                          fontSize: 10,
                          color: PdfColors.blue700,
                        ),
                      ),
                    ],
                  ),
                );
              }).toList(),
            ),
          ],
        ),
      );
    } else if (keyImage != null) {
      // Image-based key
      return pw.Container(
        width: 200,
        padding: const pw.EdgeInsets.all(8),
        decoration: pw.BoxDecoration(
          border: pw.Border.all(width: 1, color: PdfColors.grey400),
          borderRadius: const pw.BorderRadius.all(pw.Radius.circular(4)),
        ),
        child: pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            pw.Text(
              'KEY:',
              style: pw.TextStyle(font: fontBold, fontSize: 12),
            ),
            pw.SizedBox(height: 6),
            pw.Image(keyImage, width: 180, height: 100, fit: pw.BoxFit.contain),
          ],
        ),
      );
    } else {
      // No key available
      return pw.Container();
    }
  }
  
  /// Build cipher content for PDF - LaTeX inspired boxes
  /// If showSolution is true, fills the answer boxes with the correct letters
  static List<pw.Widget> _buildCipherContent(
    List<List<String>> words,
    String? selectedEncoding,
    pw.Font font,
    pw.Font mathFont,
    Map<String, pw.MemoryImage> characterImages, {
    bool showSolution = false,
    String originalText = '',
    required pw.Font fontBold,
  }) {
    // For the solution page, we need to map each ciphered character back to the original
    Map<int, String> solutionMap = {};
    
    // Only build the solution map if we're showing solutions
    if (showSolution) {
      List<String> originalLetters = [];
      for (String char in originalText.toUpperCase().split('')) {
        if (RegExp(r'[A-Z]').hasMatch(char)) {
          originalLetters.add(char);
        }
      }
      
      int letterIndex = 0;
      for (int i = 0; i < words.length; i++) {
        for (int j = 0; j < words[i].length; j++) {
          String char = words[i][j];
          if (RegExp(r'[A-Z]').hasMatch(char)) {
            if (letterIndex < originalLetters.length) {
              solutionMap[i * 100 + j] = originalLetters[letterIndex++];
            }
          }
        }
      }
    }
    
    return words.asMap().entries.map((wordEntry) {
      int wordIndex = wordEntry.key;
      List<String> word = wordEntry.value;
      
      return pw.Row(
        mainAxisSize: pw.MainAxisSize.min,
        children: word.asMap().entries.map((charEntry) {
          int charIndex = charEntry.key;
          String char = charEntry.value;
          int positionKey = wordIndex * 100 + charIndex;
          
          // Get the solution letter if showing solutions
          String? solutionLetter = showSolution ? solutionMap[positionKey] : null;
          
          if (!RegExp(r'[A-Z]').hasMatch(char)) {
            // Spaces and punctuation
            return pw.SizedBox(
              width: 20,
              child: pw.Text(
                char,
                textAlign: pw.TextAlign.center,
                style: pw.TextStyle(font: font, fontSize: 16),
              ),
            );
          } else {
            // Letter with blank space below - TeX style
            return pw.Padding(
              padding: const pw.EdgeInsets.symmetric(horizontal: 2),
              child: pw.Column(
                children: [
                  // Character (in substitution cipher) or image in image encoding
                  pw.Container(
                    width: 30,
                    height: 30,
                    alignment: pw.Alignment.center,
                    child: selectedEncoding == null
                        ? pw.Text(
                            char,
                            style: pw.TextStyle(
                              font: mathFont,
                              fontSize: 14,
                              fontWeight: pw.FontWeight.bold,
                            ),
                          )
                        : characterImages.containsKey(char)
                            ? pw.Image(
                                characterImages[char]!,
                                width: 25,
                                height: 25,
                                fit: pw.BoxFit.contain,
                              )
                            : pw.Text(
                                char,
                                style: pw.TextStyle(
                                  font: mathFont,
                                  fontSize: 12,
                                ),
                              ),
                  ),
                  
                  // TeX-style answer box - either blank or filled with solution
                  pw.Container(
                    width: 30,
                    height: 25,
                    alignment: pw.Alignment.center,
                    decoration: pw.BoxDecoration(
                      border: pw.Border(
                        bottom: pw.BorderSide(
                          width: 1,
                          color: PdfColors.black,
                        ),
                      ),
                      color: showSolution ? PdfColors.blue50 : null,
                    ),
                    child: showSolution && solutionLetter != null
                        ? pw.Text(
                            solutionLetter,
                            style: pw.TextStyle(
                              font: fontBold,
                              fontSize: 14,
                              color: PdfColors.blue800,
                            ),
                          )
                        : null,
                  ),
                ],
              ),
            );
          }
        }).toList(),
      );
    }).toList();
  }
  
  // Method to download the PDF
  static Future<void> downloadCipherPdf({
    required String originalText,
    required List<String> cipheredCharacters,
    required String? selectedEncoding,
    required Map<String, String> substitutionMap,
    required bool showKey,
  }) async {
    final pdfData = await generateCipherPdf(
      originalText: originalText,
      cipheredCharacters: cipheredCharacters,
      selectedEncoding: selectedEncoding,
      substitutionMap: substitutionMap,
      showKey: showKey,
    );
    
    await Printing.sharePdf(
      bytes: pdfData, 
      filename: 'crazy_crunchy_cipher.pdf',
    );
  }
}